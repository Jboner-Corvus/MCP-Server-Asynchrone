{
  /**
   * Hérite des options recommandées pour Node.js 22, assurant une base moderne et standardisée.
   */
  "extends": "@tsconfig/node22/tsconfig.json",

  "compilerOptions": {
    /**
     * Options de base pour la compatibilité et la modularité.
     * Le trio "NodeNext" est la configuration moderne pour les projets ESM sur Node.js.
     */
    "module": "NodeNext",
    "moduleResolution": "NodeNext",
    "target": "ES2022",

    /**
     * Qualité et Striction du Code.
     * Ces options garantissent un code plus sûr et plus propre.
     */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "forceConsistentCasingInFileNames": true,

    /**
     * Interopérabilité et configuration du build.
     */
    "esModuleInterop": true,
    "skipLibCheck": true,
    "isolatedModules": true,

    /**
     * Configuration des chemins de sortie et des sources.
     * Essentiel pour que `tsc` sache où trouver les sources et où placer les fichiers compilés.
     */
    "rootDir": "./src",
    "outDir": "./dist",
    "declaration": true,
    "sourceMap": true,

    /**
     * Configuration des chemins d'alias.
     * Permet d'utiliser des imports comme `import ... from '@/utils/helpers'`
     * au lieu de `import ... from '../../utils/helpers'`.
     */
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },

    /**
     * Permet d'importer des fichiers JSON directement dans le code TypeScript.
     */
    "resolveJsonModule": true
  },

  /**
   * Spécifie les fichiers à inclure dans la compilation.
   * Ici, nous incluons tout le code source dans le répertoire `src`.
   */
  "include": ["src/**/*"],

  /**
   * Spécifie les fichiers à exclure de la compilation.
   * Essentiel pour ne pas compiler les dépendances, les fichiers de test ou les builds précédents.
   */
  "exclude": ["node_modules", "dist", "**/*.test.ts", "**/*.spec.ts"]
}
